{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/anodyne/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"source/Download/code/Helix2D-0.0.0.1.zip","path":"Download/code/Helix2D-0.0.0.1.zip","modified":0,"renderable":0}],"Cache":[{"_id":"source/Docs/index.md","hash":"7786fb3667332ab8f61308647efb0367c18fbca1","modified":1689764930194},{"_id":"source/_posts/index.md","hash":"682d6316bfff33d738d63c9d60e572204c849b29","modified":1687079861119},{"_id":"source/Home/index.md","hash":"7dee57611cde2c8fe75da7c8769f1c2072f8f9e5","modified":1688991786139},{"_id":"source/Download/index.md","hash":"9d4e6dd131853ab9b03811a1ca71de9ccccd71ba","modified":1688991653851},{"_id":"themes/anodyne/LICENSE","hash":"981e45e987ee55b122225cab1cb17fd433ed011b","modified":1686990590210},{"_id":"themes/anodyne/_config.yml","hash":"09ab20769a9a95e58dfc4fb3ddff6857c78f0a58","modified":1689162037968},{"_id":"themes/anodyne/languages/default.yml","hash":"d65ddf96a0fbb71b39652935f40ac79518a708f3","modified":1686990590210},{"_id":"themes/anodyne/languages/en.yml","hash":"d65ddf96a0fbb71b39652935f40ac79518a708f3","modified":1686990590210},{"_id":"themes/anodyne/languages/fr.yml","hash":"7670f9b02f35365d869cde7f610c99466f994e0e","modified":1686990590210},{"_id":"themes/anodyne/languages/ja.yml","hash":"82fa6c8d18d2c61c5d4a80a0d13d7d53d9c10415","modified":1686990590210},{"_id":"themes/anodyne/languages/nl.yml","hash":"a4edf7590033031143c2320ffd296846c3f27098","modified":1686990590210},{"_id":"themes/anodyne/languages/vi.yml","hash":"90b1bd9c518ddf7c7d1acac53dc042958820fe1b","modified":1686990590210},{"_id":"themes/anodyne/languages/zh-CN.yml","hash":"681e31edea1056ad3bebcdc745322971b5cf54e0","modified":1686990590241},{"_id":"themes/anodyne/languages/zh-TW.yml","hash":"dfc10e03f3d7629217054ab944fdece31237b81f","modified":1686990590241},{"_id":"themes/anodyne/layout/archive.ejs","hash":"a9b5fc1bdec50af4d664dc58a62fae1cc8bb59ac","modified":1686990590256},{"_id":"themes/anodyne/layout/index.ejs","hash":"d005713f8551ce06e2e5877c24b1039d572a1aee","modified":1687054531580},{"_id":"themes/anodyne/layout/layout.ejs","hash":"7b8411e28713594496b7ae94d337684779417e4f","modified":1687058233358},{"_id":"themes/anodyne/layout/page.ejs","hash":"861f77c38a0914a849acdafa920d89ad64d3ad80","modified":1688992479304},{"_id":"themes/anodyne/layout/post.ejs","hash":"6a8c7e1e218cd6ed1c2b7d8c2b212c3727c524c2","modified":1687060794505},{"_id":"themes/anodyne/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1686990590210},{"_id":"themes/anodyne/README.md","hash":"e1ee5275cd0ab699fdd2c85bc28d2af91f688830","modified":1686990590210},{"_id":"themes/anodyne/template/debug.css","hash":"b9e864fe3df47f680082a7333c30a62b443f6d1a","modified":1686990590256},{"_id":"themes/anodyne/template/index.html","hash":"461f3bb4fcb2425efe5fb6ef1d27812ea6c381a3","modified":1686990590288},{"_id":"themes/anodyne/template/logo.svg","hash":"2f920701d43c40ce99b5ae85a9d0d0fb6affe66a","modified":1686990590288},{"_id":"themes/anodyne/layout/_partial/after-footer.ejs","hash":"0ff4cb8e08c62a5b989cb35a47dec7fea33c1cc5","modified":1686990590241},{"_id":"themes/anodyne/layout/_partial/article-archive.ejs","hash":"5050db10de978ae74f4acf4777574038da903749","modified":1687056057216},{"_id":"themes/anodyne/layout/_partial/article-short.ejs","hash":"10ae596f7d7bfc0911b30ec9b8e3cb9b22269e19","modified":1687056057887},{"_id":"themes/anodyne/layout/_partial/banner.ejs","hash":"a5891cb140fb7ede6a99bea9ed67b95e6ba3d5b2","modified":1688990908490},{"_id":"themes/anodyne/layout/_partial/comments.ejs","hash":"d7574d60b08e6d5b0eb9fcf93052c39a800963ca","modified":1686990590256},{"_id":"themes/anodyne/layout/_partial/footer.ejs","hash":"56627df6877780e5c3777a81c5679f01573d50ab","modified":1688989634221},{"_id":"themes/anodyne/layout/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1686990590256},{"_id":"themes/anodyne/layout/_partial/head.ejs","hash":"61d6a2a053218e79c06358ac21254f8d2a10b055","modified":1688885390102},{"_id":"themes/anodyne/layout/_partial/pagination.ejs","hash":"01e67da7ba631ee9b64cf1319c78105dead9c25b","modified":1686990590256},{"_id":"themes/anodyne/layout/_partial/tag-category-index.ejs","hash":"e2e30448279d56f77b39e98fdcdd6da8c72dd6da","modified":1686990590256},{"_id":"themes/anodyne/layout/_partial/widget-about.ejs","hash":"72601cf414aa7679969665cc82ecdb44c60bd6a1","modified":1686990590256},{"_id":"themes/anodyne/layout/_partial/widget-categories.ejs","hash":"b809841c2cce986aefccfcdaec4c51d52d8820b5","modified":1686990590256},{"_id":"themes/anodyne/layout/_partial/widget-recent-posts.ejs","hash":"b6537acad29d852f78272b393017a7dcf06e3912","modified":1686990590256},{"_id":"themes/anodyne/source/css/style.styl","hash":"bd79e1d5dc47062dbe186fad417f78b833b5f664","modified":1688884831493},{"_id":"themes/anodyne/template/post.html","hash":"1203ec10a07779f1912e95c5973df80782f5fc91","modified":1687058969491},{"_id":"themes/anodyne/template/style.css","hash":"8a98c82d878c140bcfffdb989a95c186e6099446","modified":1688894860051},{"_id":"themes/anodyne/template/devicon/Read Me.txt","hash":"7cb4baf9bd429bcd3833d2a96f3fbe29a7dd4ce9","modified":1686990590256},{"_id":"themes/anodyne/source/css/partial/_base.styl","hash":"ccdedafe01cf83dfb3bba810c4745d5dd1ebcd57","modified":1686990590256},{"_id":"themes/anodyne/source/css/partial/_content.styl","hash":"9bc7ffe607f0c99946d3cca532ce55d0e8ff5e9e","modified":1686990590256},{"_id":"themes/anodyne/source/css/partial/_highlight.styl","hash":"879daa8d21955c2f405fedc565136727bf5505ae","modified":1689384560439},{"_id":"themes/anodyne/template/devicon/demo-files/demo.css","hash":"376a44d4a24eea8b44641724a7f9864a48038791","modified":1686990590256},{"_id":"themes/anodyne/template/devicon/style.css","hash":"96275eba39610765bfa9358bbe14c550527628c2","modified":1688895024054},{"_id":"themes/anodyne/template/devicon/demo-files/demo.js","hash":"e264ca246dbc4c632b053c19f7ca746b95b3f0b3","modified":1686990590256},{"_id":"themes/anodyne/template/devicon/fonts/devicon.eot","hash":"72d1a173e58c7508bb1457a535b67472c6c35cec","modified":1686990590272},{"_id":"themes/anodyne/template/devicon/fonts/devicon.woff","hash":"69b887104812d0f246195fc3ee4abcafbbc4e961","modified":1686990590288},{"_id":"themes/anodyne/template/devicon/demo.html","hash":"62cc426875788b907d6e2f6df91c631c4839add8","modified":1686990590256},{"_id":"themes/anodyne/template/devicon/fonts/devicon.svg","hash":"b86b7899f2e717e81286220e982d69939d601688","modified":1686990590272},{"_id":"themes/anodyne/template/devicon/selection.json","hash":"ea12e05500a7eda0158e8e3c3509ad53c9755a3a","modified":1686990590288},{"_id":"themes/anodyne/template/devicon/fonts/devicon.ttf","hash":"3eb76cd8e89f7046a735a7a8bc2de693c7314a07","modified":1686990590272},{"_id":"source/Download/code/Helix2D-0.0.0.1.zip","hash":"9134a85b723851b638a951f3624b822fda2bb842","modified":1688988269719},{"_id":"public/Docs/index.html","hash":"6862d0d72e2dcd59bffa7517ef433a0b5df414e0","modified":1689766979911},{"_id":"public/Download/index.html","hash":"1d3c52e7c35348bd6d3cf62f391b88a647acec12","modified":1689766979911},{"_id":"public/index.html","hash":"bdb5eebcd9439bfd2f16a8818e4f189697ee49f4","modified":1689766979911},{"_id":"public/2023/06/18/index/index.html","hash":"febc904aae8cb27ab6b7a78ebf74b98db0b7030c","modified":1689766979911},{"_id":"public/archives/index.html","hash":"4fa812da49d4a7d2c3802675f71fc73d5824e641","modified":1689766979911},{"_id":"public/archives/2023/index.html","hash":"4fa812da49d4a7d2c3802675f71fc73d5824e641","modified":1689766979911},{"_id":"public/archives/2023/06/index.html","hash":"4fa812da49d4a7d2c3802675f71fc73d5824e641","modified":1689766979911},{"_id":"public/Home/index.html","hash":"84f7b6ea3803210b73c64ec0c1d88d4655fdab31","modified":1689766979911},{"_id":"public/css/style.css","hash":"aa517f5cd4c646585fb018de0a0ff7508f15d31e","modified":1689071058794},{"_id":"public/Download/code/Helix2D-0.0.0.1.zip","hash":"9134a85b723851b638a951f3624b822fda2bb842","modified":1689071058794},{"_id":"source/Docs/index.ejs","hash":"cd1470d5d5a5e39259faee5bb3f22478056c1b63","modified":1689076430433},{"_id":"source/Docs/page.ejs","hash":"861f77c38a0914a849acdafa920d89ad64d3ad80","modified":1688992479304},{"_id":"source/Docs/post.ejs","hash":"6a8c7e1e218cd6ed1c2b7d8c2b212c3727c524c2","modified":1687060794505},{"_id":"source/Docs/layout.ejs","hash":"7b8411e28713594496b7ae94d337684779417e4f","modified":1687058233358},{"_id":"source/Docs/index copy.ejs","hash":"d005713f8551ce06e2e5877c24b1039d572a1aee","modified":1687054531580},{"_id":"source/Docs/_partial/after-footer.ejs","hash":"0ff4cb8e08c62a5b989cb35a47dec7fea33c1cc5","modified":1686990590241},{"_id":"source/Docs/_partial/banner.ejs","hash":"a5891cb140fb7ede6a99bea9ed67b95e6ba3d5b2","modified":1688990908490},{"_id":"source/Docs/_partial/article-short.ejs","hash":"10ae596f7d7bfc0911b30ec9b8e3cb9b22269e19","modified":1687056057887},{"_id":"source/Docs/_partial/article-archive.ejs","hash":"5050db10de978ae74f4acf4777574038da903749","modified":1687056057216},{"_id":"source/Docs/_partial/comments.ejs","hash":"d7574d60b08e6d5b0eb9fcf93052c39a800963ca","modified":1686990590256},{"_id":"source/Docs/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1686990590256},{"_id":"source/Docs/_partial/head.ejs","hash":"61d6a2a053218e79c06358ac21254f8d2a10b055","modified":1688885390102},{"_id":"source/Docs/_partial/pagination.ejs","hash":"01e67da7ba631ee9b64cf1319c78105dead9c25b","modified":1686990590256},{"_id":"source/Docs/_partial/widget-about.ejs","hash":"72601cf414aa7679969665cc82ecdb44c60bd6a1","modified":1686990590256},{"_id":"source/Docs/_partial/tag-category-index.ejs","hash":"e2e30448279d56f77b39e98fdcdd6da8c72dd6da","modified":1686990590256},{"_id":"source/Docs/_partial/widget-recent-posts.ejs","hash":"b6537acad29d852f78272b393017a7dcf06e3912","modified":1686990590256},{"_id":"source/Docs/_partial/footer.ejs","hash":"56627df6877780e5c3777a81c5679f01573d50ab","modified":1688989634221},{"_id":"source/Docs/_partial/widget-categories.ejs","hash":"b809841c2cce986aefccfcdaec4c51d52d8820b5","modified":1686990590256},{"_id":"source/Docs/archive.ejs","hash":"a9b5fc1bdec50af4d664dc58a62fae1cc8bb59ac","modified":1686990590256},{"_id":"source/Docs/index.html","hash":"18fc0e296a1bfcdacfa631af323ee1de76c1c484","modified":1689076688800},{"_id":"source/Tutorial/begin.md","hash":"ce9631e656e696be144f893caa39695ca4fb541c","modified":1689471508596},{"_id":"source/Tutorial/index.md","hash":"45353d92030d9d8862b563471bffe303496ec030","modified":1689764930959},{"_id":"public/Tutorial/begin.html","hash":"9d246d075420ad647d89b7f950973cc2255fb663","modified":1689766979911},{"_id":"public/Tutorial/index.html","hash":"dbb4ae34ed175d31d3e08913dd2d8a29e337c9dd","modified":1689766979911},{"_id":"source/Tutorial/example.md","hash":"5e96235bb08356090cc69060cdc4c0c6412e4e30","modified":1689249034542},{"_id":"public/Tutorial/example.html","hash":"2ca77f0f68bb481e27c7fb383583f21194049b11","modified":1689249057316},{"_id":"source/Tutorial/Window.md","hash":"eb309070a64a1d2a002a6e6a181c397a77936df1","modified":1689383815589},{"_id":"public/Tutorial/Window.html","hash":"828dabf3a7a222cd7bfbef87a3f3d4871bf9523a","modified":1689383896080},{"_id":"source/Tutorial/Base/Window.md","hash":"eb309070a64a1d2a002a6e6a181c397a77936df1","modified":1689383815589},{"_id":"source/Tutorial/preface.md","hash":"d3bc0cae708beefab3549fa65e2c6d9d0a92e7b0","modified":1689471401830},{"_id":"source/Tutorial/Render/Painter.md","hash":"4eea6282413fa1b7e1ac8ad69b60334f51691717","modified":1689473098767},{"_id":"public/Tutorial/preface.html","hash":"f7e11d1f41828c72a3658607e1299101bfbda5c3","modified":1689766979911},{"_id":"public/Tutorial/Base/Window.html","hash":"c9d165f51ef481f1eaff9bbcc25bb7d290886eaf","modified":1689766979911},{"_id":"public/Tutorial/Render/Painter.html","hash":"d8c7225c8192f972c2ed135339b3811674a36654","modified":1689766979911}],"Category":[],"Data":[],"Page":[{"title":"Download","date":"2023-07-10T11:03:56.000Z","_content":"\n# <center>下载代码</center>\n\n<center>你可以直接在此下载Helix2D的静态链接库与头文件，或通过访问GitHub下载所有源代码</center>\n\n最新版本：[Helix2D-0.0.0.1](code/Helix2D-0.0.0.1.zip)\nGit：https://github.com/FriesPeter/Helix2D.git\n\n<hr>\n\n### <center>历史版本</center>\n\n- [Helix2D-0.0.0.1][0.0.0.1]\n\n\n[0.0.0.1]:code/Helix2D-0.0.0.1.zip \"Helix2D-0.0.0.1\"","source":"Download/index.md","raw":"---\ntitle: Download\ndate: 2023-07-10 19:03:56\n---\n\n# <center>下载代码</center>\n\n<center>你可以直接在此下载Helix2D的静态链接库与头文件，或通过访问GitHub下载所有源代码</center>\n\n最新版本：[Helix2D-0.0.0.1](code/Helix2D-0.0.0.1.zip)\nGit：https://github.com/FriesPeter/Helix2D.git\n\n<hr>\n\n### <center>历史版本</center>\n\n- [Helix2D-0.0.0.1][0.0.0.1]\n\n\n[0.0.0.1]:code/Helix2D-0.0.0.1.zip \"Helix2D-0.0.0.1\"","updated":"2023-07-10T12:20:53.851Z","path":"Download/index.html","comments":1,"layout":"page","_id":"cljy5aqpa0001z0sy9lbr7g8b","content":"<h1 id=\"下载代码\"><a href=\"#下载代码\" class=\"headerlink\" title=\"下载代码\"></a><center>下载代码</center></h1><center>你可以直接在此下载Helix2D的静态链接库与头文件，或通过访问GitHub下载所有源代码</center>\n\n<p>最新版本：<a href=\"code/Helix2D-0.0.0.1.zip\">Helix2D-0.0.0.1</a><br>Git：<a href=\"https://github.com/FriesPeter/Helix2D.git\">https://github.com/FriesPeter/Helix2D.git</a></p>\n<hr>\n\n<h3 id=\"历史版本\"><a href=\"#历史版本\" class=\"headerlink\" title=\"历史版本\"></a><center>历史版本</center></h3><ul>\n<li><a href=\"code/Helix2D-0.0.0.1.zip\" title=\"Helix2D-0.0.0.1\">Helix2D-0.0.0.1</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载代码\"><a href=\"#下载代码\" class=\"headerlink\" title=\"下载代码\"></a><center>下载代码</center></h1><center>你可以直接在此下载Helix2D的静态链接库与头文件，或通过访问GitHub下载所有源代码</center>\n\n<p>最新版本：<a href=\"code/Helix2D-0.0.0.1.zip\">Helix2D-0.0.0.1</a><br>Git：<a href=\"https://github.com/FriesPeter/Helix2D.git\">https://github.com/FriesPeter/Helix2D.git</a></p>\n<hr>\n\n<h3 id=\"历史版本\"><a href=\"#历史版本\" class=\"headerlink\" title=\"历史版本\"></a><center>历史版本</center></h3><ul>\n<li><a href=\"code/Helix2D-0.0.0.1.zip\" title=\"Helix2D-0.0.0.1\">Helix2D-0.0.0.1</a></li>\n</ul>\n"},{"title":"Helix2D","date":"2023-06-18T09:36:38.000Z","type":"Home","_content":"\n## <center>欢迎使用Helix2D！</center>\n\nHelix2D 是一个小巧但灵活的*Windows*图形库，它基于*Direct2D*开发，专为入门 **C++** 的新手而打造。\n\n**主要特点**：\n- 非常*容易上手*，没有过多的复杂代码\n- 贴合原生 *C++* 代码，学习轻松\n- 高度可*定制化* 的参数和选项，简洁却不简单\n\n**文档和API参考**：\n由于时间问题，目前Helix2D并未提供详细的文档，你可以加入我们的QQ群进行学习交流，后续我们会提供详细的文档和API参考，帮助你快速上手和使用 Helix2D。你可以找到安装说明、使用教程和示例代码等资源，让你迅速掌握 Helix2D 的各项功能和用法\n\n**下载和获取**：\n想要获取 Helix2D？你可以点击导航栏按钮下载最新版本，并加入我们的群组，与其他用户交流经验、解答问题\nQQ群：*693409874*\n\n无论你是专业开发人员，还是刚刚开始探索C++开发的新手，Helix2D 都将成为你创作和表达的得力助手\n\n立即开始，释放你的创意吧！","source":"Home/index.md","raw":"---\ntitle: Helix2D\ndate: 2023-06-18 17:36:38\npermalink: index.html\ntype: \"Home\"\n---\n\n## <center>欢迎使用Helix2D！</center>\n\nHelix2D 是一个小巧但灵活的*Windows*图形库，它基于*Direct2D*开发，专为入门 **C++** 的新手而打造。\n\n**主要特点**：\n- 非常*容易上手*，没有过多的复杂代码\n- 贴合原生 *C++* 代码，学习轻松\n- 高度可*定制化* 的参数和选项，简洁却不简单\n\n**文档和API参考**：\n由于时间问题，目前Helix2D并未提供详细的文档，你可以加入我们的QQ群进行学习交流，后续我们会提供详细的文档和API参考，帮助你快速上手和使用 Helix2D。你可以找到安装说明、使用教程和示例代码等资源，让你迅速掌握 Helix2D 的各项功能和用法\n\n**下载和获取**：\n想要获取 Helix2D？你可以点击导航栏按钮下载最新版本，并加入我们的群组，与其他用户交流经验、解答问题\nQQ群：*693409874*\n\n无论你是专业开发人员，还是刚刚开始探索C++开发的新手，Helix2D 都将成为你创作和表达的得力助手\n\n立即开始，释放你的创意吧！","updated":"2023-07-10T12:23:06.139Z","path":"index.html","comments":1,"layout":"page","_id":"cljy5aqpf0003z0syc8nl6674","content":"<h2 id=\"欢迎使用Helix2D！\"><a href=\"#欢迎使用Helix2D！\" class=\"headerlink\" title=\"欢迎使用Helix2D！\"></a><center>欢迎使用Helix2D！</center></h2><p>Helix2D 是一个小巧但灵活的<em>Windows</em>图形库，它基于<em>Direct2D</em>开发，专为入门 <strong>C++</strong> 的新手而打造。</p>\n<p><strong>主要特点</strong>：</p>\n<ul>\n<li>非常<em>容易上手</em>，没有过多的复杂代码</li>\n<li>贴合原生 <em>C++</em> 代码，学习轻松</li>\n<li>高度可<em>定制化</em> 的参数和选项，简洁却不简单</li>\n</ul>\n<p><strong>文档和API参考</strong>：<br>由于时间问题，目前Helix2D并未提供详细的文档，你可以加入我们的QQ群进行学习交流，后续我们会提供详细的文档和API参考，帮助你快速上手和使用 Helix2D。你可以找到安装说明、使用教程和示例代码等资源，让你迅速掌握 Helix2D 的各项功能和用法</p>\n<p><strong>下载和获取</strong>：<br>想要获取 Helix2D？你可以点击导航栏按钮下载最新版本，并加入我们的群组，与其他用户交流经验、解答问题<br>QQ群：<em>693409874</em></p>\n<p>无论你是专业开发人员，还是刚刚开始探索C++开发的新手，Helix2D 都将成为你创作和表达的得力助手</p>\n<p>立即开始，释放你的创意吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"欢迎使用Helix2D！\"><a href=\"#欢迎使用Helix2D！\" class=\"headerlink\" title=\"欢迎使用Helix2D！\"></a><center>欢迎使用Helix2D！</center></h2><p>Helix2D 是一个小巧但灵活的<em>Windows</em>图形库，它基于<em>Direct2D</em>开发，专为入门 <strong>C++</strong> 的新手而打造。</p>\n<p><strong>主要特点</strong>：</p>\n<ul>\n<li>非常<em>容易上手</em>，没有过多的复杂代码</li>\n<li>贴合原生 <em>C++</em> 代码，学习轻松</li>\n<li>高度可<em>定制化</em> 的参数和选项，简洁却不简单</li>\n</ul>\n<p><strong>文档和API参考</strong>：<br>由于时间问题，目前Helix2D并未提供详细的文档，你可以加入我们的QQ群进行学习交流，后续我们会提供详细的文档和API参考，帮助你快速上手和使用 Helix2D。你可以找到安装说明、使用教程和示例代码等资源，让你迅速掌握 Helix2D 的各项功能和用法</p>\n<p><strong>下载和获取</strong>：<br>想要获取 Helix2D？你可以点击导航栏按钮下载最新版本，并加入我们的群组，与其他用户交流经验、解答问题<br>QQ群：<em>693409874</em></p>\n<p>无论你是专业开发人员，还是刚刚开始探索C++开发的新手，Helix2D 都将成为你创作和表达的得力助手</p>\n<p>立即开始，释放你的创意吧！</p>\n"},{"title":"Docs","date":"2023-07-11T12:03:40.000Z","_content":"\n### <center>这里还什么都没有哦</center>","source":"Docs/index.md","raw":"---\ntitle: Docs\ndate: 2023-07-11 20:03:40\n---\n\n### <center>这里还什么都没有哦</center>","updated":"2023-07-19T11:08:50.194Z","path":"Docs/index.html","_id":"cljy8s5it0000i4sy98cx7ajy","comments":1,"layout":"page","content":"<h3 id=\"这里还什么都没有哦\"><a href=\"#这里还什么都没有哦\" class=\"headerlink\" title=\"这里还什么都没有哦\"></a><center>这里还什么都没有哦</center></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"这里还什么都没有哦\"><a href=\"#这里还什么都没有哦\" class=\"headerlink\" title=\"这里还什么都没有哦\"></a><center>这里还什么都没有哦</center></h3>"},{"_content":"## 快速上手Helix2D\n\nHelix2D的写法非常简单易懂，用很少的代码就能实现你想要的功能\n现在，让我们来写一个简单的Helix2D程序\n\n### 窗口部分\n\n```C++\n#include <helix2d/helix2d.h>\nusing namespace helix2d;\n\nint main()\n{\n    Window window{L\"Window1\"};\n    while (true)\n    {\n        //整个程序的主循环，当该循环结束时，整个程序就会结束\n        //当所有窗口都关闭时，整个程序会自动结束\n    }\n    return 0;\n}\n```\n\n这样你就创建了一个默认600x600的白色窗口，窗口标题为`Window1`\n\nHelix2D同样也支持多窗口程序，只需多加一行代码：\n\n```C++\n#include <helix2d/helix2d.h>\nusing namespace helix2d;\n\nint main()\n{\n    Window window{L\"Window1\"};\n    Window window2{L\"Window2\"}; //再创建一个窗口\n    while (true)\n    {\n        \n    }\n    return 0;\n}\n```\n\n### 绘制部分\n\n现在我们的窗口已经创建好了，接下来就可以在窗口上绘制我们想要的部分了\n对于我们的绘制工作，都需要通过一个名为`Painter`的对象来进行绘制\n\n`Painter`，顾名思义，就是 *“ 画家 ”* 的意思，Helix2D提供了一系列简单的`Painter`，如`Rect`(*矩形*)，`Circle`(*圆形*), `Sprite`(*精灵*)等\n\n那么让我们来写代码吧\n\n```C++\n#include <helix2d/helix2d.h>\nusing namespace helix2d;\n\nint main()\n{\n    Window window{L\"Window1\"};\n\n    Rect rect;                  //创建一个默认大小50x50的矩形\n    rect.setColor(Color::Red);  //将矩形颜色改为红色\n    rect.setPos(100.0f,100.0f); //设置矩形中心点在窗口的坐标为(100,100)\n    \n    window.addPainter(&rect);   //将矩形添加进窗口，让他在窗口上绘制\n\n    while (true)\n    {\n        \n    }\n    return 0;\n}\n```\n\n那么我们在这里解释一下代码中新出现的元素：\n\n`Color`，颜色类，该类包含了许多常用的颜色，你也可以使用RGB色值创建自己想要的颜色\n\n`坐标`，注意，这里的坐标系是**坐标点越右，X值就越大；坐标点越下，Y值就越大**。并且，所有`Painter`的默认坐标点都是他们的中心点\n\n\n### 小结\n\n这样你就完成了一个简单的Helix2D程序！想了解更多信息可以学习教程或查阅文档~","source":"Tutorial/begin.md","raw":"## 快速上手Helix2D\n\nHelix2D的写法非常简单易懂，用很少的代码就能实现你想要的功能\n现在，让我们来写一个简单的Helix2D程序\n\n### 窗口部分\n\n```C++\n#include <helix2d/helix2d.h>\nusing namespace helix2d;\n\nint main()\n{\n    Window window{L\"Window1\"};\n    while (true)\n    {\n        //整个程序的主循环，当该循环结束时，整个程序就会结束\n        //当所有窗口都关闭时，整个程序会自动结束\n    }\n    return 0;\n}\n```\n\n这样你就创建了一个默认600x600的白色窗口，窗口标题为`Window1`\n\nHelix2D同样也支持多窗口程序，只需多加一行代码：\n\n```C++\n#include <helix2d/helix2d.h>\nusing namespace helix2d;\n\nint main()\n{\n    Window window{L\"Window1\"};\n    Window window2{L\"Window2\"}; //再创建一个窗口\n    while (true)\n    {\n        \n    }\n    return 0;\n}\n```\n\n### 绘制部分\n\n现在我们的窗口已经创建好了，接下来就可以在窗口上绘制我们想要的部分了\n对于我们的绘制工作，都需要通过一个名为`Painter`的对象来进行绘制\n\n`Painter`，顾名思义，就是 *“ 画家 ”* 的意思，Helix2D提供了一系列简单的`Painter`，如`Rect`(*矩形*)，`Circle`(*圆形*), `Sprite`(*精灵*)等\n\n那么让我们来写代码吧\n\n```C++\n#include <helix2d/helix2d.h>\nusing namespace helix2d;\n\nint main()\n{\n    Window window{L\"Window1\"};\n\n    Rect rect;                  //创建一个默认大小50x50的矩形\n    rect.setColor(Color::Red);  //将矩形颜色改为红色\n    rect.setPos(100.0f,100.0f); //设置矩形中心点在窗口的坐标为(100,100)\n    \n    window.addPainter(&rect);   //将矩形添加进窗口，让他在窗口上绘制\n\n    while (true)\n    {\n        \n    }\n    return 0;\n}\n```\n\n那么我们在这里解释一下代码中新出现的元素：\n\n`Color`，颜色类，该类包含了许多常用的颜色，你也可以使用RGB色值创建自己想要的颜色\n\n`坐标`，注意，这里的坐标系是**坐标点越右，X值就越大；坐标点越下，Y值就越大**。并且，所有`Painter`的默认坐标点都是他们的中心点\n\n\n### 小结\n\n这样你就完成了一个简单的Helix2D程序！想了解更多信息可以学习教程或查阅文档~","date":"2023-07-16T01:38:28.596Z","updated":"2023-07-16T01:38:28.596Z","path":"Tutorial/begin.html","_id":"cljy9am2n0000y8sy9tkz518s","title":"","comments":1,"layout":"page","content":"<h2 id=\"快速上手Helix2D\"><a href=\"#快速上手Helix2D\" class=\"headerlink\" title=\"快速上手Helix2D\"></a>快速上手Helix2D</h2><p>Helix2D的写法非常简单易懂，用很少的代码就能实现你想要的功能<br>现在，让我们来写一个简单的Helix2D程序</p>\n<h3 id=\"窗口部分\"><a href=\"#窗口部分\" class=\"headerlink\" title=\"窗口部分\"></a>窗口部分</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;helix2d/helix2d.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> helix2d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Window window&#123;<span class=\"string\">L&quot;Window1&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//整个程序的主循环，当该循环结束时，整个程序就会结束</span></span><br><span class=\"line\">        <span class=\"comment\">//当所有窗口都关闭时，整个程序会自动结束</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样你就创建了一个默认600x600的白色窗口，窗口标题为<code>Window1</code></p>\n<p>Helix2D同样也支持多窗口程序，只需多加一行代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;helix2d/helix2d.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> helix2d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Window window&#123;<span class=\"string\">L&quot;Window1&quot;</span>&#125;;</span><br><span class=\"line\">    Window window2&#123;<span class=\"string\">L&quot;Window2&quot;</span>&#125;; <span class=\"comment\">//再创建一个窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绘制部分\"><a href=\"#绘制部分\" class=\"headerlink\" title=\"绘制部分\"></a>绘制部分</h3><p>现在我们的窗口已经创建好了，接下来就可以在窗口上绘制我们想要的部分了<br>对于我们的绘制工作，都需要通过一个名为<code>Painter</code>的对象来进行绘制</p>\n<p><code>Painter</code>，顾名思义，就是 <em>“ 画家 ”</em> 的意思，Helix2D提供了一系列简单的<code>Painter</code>，如<code>Rect</code>(<em>矩形</em>)，<code>Circle</code>(<em>圆形</em>), <code>Sprite</code>(<em>精灵</em>)等</p>\n<p>那么让我们来写代码吧</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;helix2d/helix2d.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> helix2d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Window window&#123;<span class=\"string\">L&quot;Window1&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rect rect;                  <span class=\"comment\">//创建一个默认大小50x50的矩形</span></span><br><span class=\"line\">    rect.<span class=\"built_in\">setColor</span>(Color::Red);  <span class=\"comment\">//将矩形颜色改为红色</span></span><br><span class=\"line\">    rect.<span class=\"built_in\">setPos</span>(<span class=\"number\">100.0f</span>,<span class=\"number\">100.0f</span>); <span class=\"comment\">//设置矩形中心点在窗口的坐标为(100,100)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    window.<span class=\"built_in\">addPainter</span>(&amp;rect);   <span class=\"comment\">//将矩形添加进窗口，让他在窗口上绘制</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么我们在这里解释一下代码中新出现的元素：</p>\n<p><code>Color</code>，颜色类，该类包含了许多常用的颜色，你也可以使用RGB色值创建自己想要的颜色</p>\n<p><code>坐标</code>，注意，这里的坐标系是<strong>坐标点越右，X值就越大；坐标点越下，Y值就越大</strong>。并且，所有<code>Painter</code>的默认坐标点都是他们的中心点</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这样你就完成了一个简单的Helix2D程序！想了解更多信息可以学习教程或查阅文档~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"快速上手Helix2D\"><a href=\"#快速上手Helix2D\" class=\"headerlink\" title=\"快速上手Helix2D\"></a>快速上手Helix2D</h2><p>Helix2D的写法非常简单易懂，用很少的代码就能实现你想要的功能<br>现在，让我们来写一个简单的Helix2D程序</p>\n<h3 id=\"窗口部分\"><a href=\"#窗口部分\" class=\"headerlink\" title=\"窗口部分\"></a>窗口部分</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;helix2d/helix2d.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> helix2d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Window window&#123;<span class=\"string\">L&quot;Window1&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//整个程序的主循环，当该循环结束时，整个程序就会结束</span></span><br><span class=\"line\">        <span class=\"comment\">//当所有窗口都关闭时，整个程序会自动结束</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样你就创建了一个默认600x600的白色窗口，窗口标题为<code>Window1</code></p>\n<p>Helix2D同样也支持多窗口程序，只需多加一行代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;helix2d/helix2d.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> helix2d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Window window&#123;<span class=\"string\">L&quot;Window1&quot;</span>&#125;;</span><br><span class=\"line\">    Window window2&#123;<span class=\"string\">L&quot;Window2&quot;</span>&#125;; <span class=\"comment\">//再创建一个窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绘制部分\"><a href=\"#绘制部分\" class=\"headerlink\" title=\"绘制部分\"></a>绘制部分</h3><p>现在我们的窗口已经创建好了，接下来就可以在窗口上绘制我们想要的部分了<br>对于我们的绘制工作，都需要通过一个名为<code>Painter</code>的对象来进行绘制</p>\n<p><code>Painter</code>，顾名思义，就是 <em>“ 画家 ”</em> 的意思，Helix2D提供了一系列简单的<code>Painter</code>，如<code>Rect</code>(<em>矩形</em>)，<code>Circle</code>(<em>圆形</em>), <code>Sprite</code>(<em>精灵</em>)等</p>\n<p>那么让我们来写代码吧</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;helix2d/helix2d.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> helix2d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Window window&#123;<span class=\"string\">L&quot;Window1&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rect rect;                  <span class=\"comment\">//创建一个默认大小50x50的矩形</span></span><br><span class=\"line\">    rect.<span class=\"built_in\">setColor</span>(Color::Red);  <span class=\"comment\">//将矩形颜色改为红色</span></span><br><span class=\"line\">    rect.<span class=\"built_in\">setPos</span>(<span class=\"number\">100.0f</span>,<span class=\"number\">100.0f</span>); <span class=\"comment\">//设置矩形中心点在窗口的坐标为(100,100)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    window.<span class=\"built_in\">addPainter</span>(&amp;rect);   <span class=\"comment\">//将矩形添加进窗口，让他在窗口上绘制</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么我们在这里解释一下代码中新出现的元素：</p>\n<p><code>Color</code>，颜色类，该类包含了许多常用的颜色，你也可以使用RGB色值创建自己想要的颜色</p>\n<p><code>坐标</code>，注意，这里的坐标系是<strong>坐标点越右，X值就越大；坐标点越下，Y值就越大</strong>。并且，所有<code>Painter</code>的默认坐标点都是他们的中心点</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这样你就完成了一个简单的Helix2D程序！想了解更多信息可以学习教程或查阅文档~</p>\n"},{"title":"Tutorial","date":"2023-07-11T12:03:40.000Z","_content":"\n### <center>这里还什么都没有哦</center>\n\n<!-- ## 目录\n\n我们为你对Helix2D的学习制定了一个大概的计划，\n帮助你快速上手Helix2D\n\n[编写第一个Helix2D程序](begin.html)\n\n[前言](preface.html)\n[1.Window类使用](Base/Window.html)\n[2.Painter类使用](Render/Painter.html) -->","source":"Tutorial/index.md","raw":"---\ntitle: Tutorial\ndate: 2023-07-11 20:03:40\n---\n\n### <center>这里还什么都没有哦</center>\n\n<!-- ## 目录\n\n我们为你对Helix2D的学习制定了一个大概的计划，\n帮助你快速上手Helix2D\n\n[编写第一个Helix2D程序](begin.html)\n\n[前言](preface.html)\n[1.Window类使用](Base/Window.html)\n[2.Painter类使用](Render/Painter.html) -->","updated":"2023-07-19T11:08:50.959Z","path":"Tutorial/index.html","_id":"cljy9am2o0001y8sy9vgo8eyd","comments":1,"layout":"page","content":"<h3 id=\"这里还什么都没有哦\"><a href=\"#这里还什么都没有哦\" class=\"headerlink\" title=\"这里还什么都没有哦\"></a><center>这里还什么都没有哦</center></h3><!-- ## 目录\n\n我们为你对Helix2D的学习制定了一个大概的计划，\n帮助你快速上手Helix2D\n\n[编写第一个Helix2D程序](begin.html)\n\n[前言](preface.html)\n[1.Window类使用](Base/Window.html)\n[2.Painter类使用](Render/Painter.html) -->","site":{"data":{}},"excerpt":"","more":"<h3 id=\"这里还什么都没有哦\"><a href=\"#这里还什么都没有哦\" class=\"headerlink\" title=\"这里还什么都没有哦\"></a><center>这里还什么都没有哦</center></h3><!-- ## 目录\n\n我们为你对Helix2D的学习制定了一个大概的计划，\n帮助你快速上手Helix2D\n\n[编写第一个Helix2D程序](begin.html)\n\n[前言](preface.html)\n[1.Window类使用](Base/Window.html)\n[2.Painter类使用](Render/Painter.html) -->"},{"_content":"## 前言\n\n本篇文章是为了阐述Helix2D的一些学习技巧和编码规范，以便用户可以更好的学习Helix2D的使用\n\n### 关于教程和文档\n\n教程中讲到的具体都是如何使用，比较简单；\n文档中讲到的会比教程更详细，包括一些实现细节，更多的注意事项等等\n\n对于新手，你注要学习教程，文档只需选择性查阅即可\n对于进阶，你可以专注于查阅文档和查看源码\n\n### 关于命名规范\n\nHelix2D的方法都使用**小驼峰**书写，\n也就是第一个单词首字母小写，其余单词首字符大写\n\n类名则使用**大驼峰**书写，也就是所有单词首字母大写\n\n### 关于属性\n\n一般情况下，用户可以使用 **set + 属性名** 的方式修改属性值，\n获取属性则使用 **get + 属性名** 的方式获取属性值，\n如果是获取`bool`类型的属性值，则使用 **is + 属性值** 的方式获取\n\n### 如何学习\n\n虽然Helix2D的使用和学习比较简单，但全篇学习下来也需要一段时间，\n我们更推荐选择性地学习，在学习完基本知识后，可以边写一个小程序边学习，遇到不懂的再查阅教程和文档","source":"Tutorial/preface.md","raw":"## 前言\n\n本篇文章是为了阐述Helix2D的一些学习技巧和编码规范，以便用户可以更好的学习Helix2D的使用\n\n### 关于教程和文档\n\n教程中讲到的具体都是如何使用，比较简单；\n文档中讲到的会比教程更详细，包括一些实现细节，更多的注意事项等等\n\n对于新手，你注要学习教程，文档只需选择性查阅即可\n对于进阶，你可以专注于查阅文档和查看源码\n\n### 关于命名规范\n\nHelix2D的方法都使用**小驼峰**书写，\n也就是第一个单词首字母小写，其余单词首字符大写\n\n类名则使用**大驼峰**书写，也就是所有单词首字母大写\n\n### 关于属性\n\n一般情况下，用户可以使用 **set + 属性名** 的方式修改属性值，\n获取属性则使用 **get + 属性名** 的方式获取属性值，\n如果是获取`bool`类型的属性值，则使用 **is + 属性值** 的方式获取\n\n### 如何学习\n\n虽然Helix2D的使用和学习比较简单，但全篇学习下来也需要一段时间，\n我们更推荐选择性地学习，在学习完基本知识后，可以边写一个小程序边学习，遇到不懂的再查阅教程和文档","date":"2023-07-16T01:36:41.830Z","updated":"2023-07-16T01:36:41.830Z","path":"Tutorial/preface.html","title":"","comments":1,"layout":"page","_id":"clk9nmquk0000kssy49m59rrw","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇文章是为了阐述Helix2D的一些学习技巧和编码规范，以便用户可以更好的学习Helix2D的使用</p>\n<h3 id=\"关于教程和文档\"><a href=\"#关于教程和文档\" class=\"headerlink\" title=\"关于教程和文档\"></a>关于教程和文档</h3><p>教程中讲到的具体都是如何使用，比较简单；<br>文档中讲到的会比教程更详细，包括一些实现细节，更多的注意事项等等</p>\n<p>对于新手，你注要学习教程，文档只需选择性查阅即可<br>对于进阶，你可以专注于查阅文档和查看源码</p>\n<h3 id=\"关于命名规范\"><a href=\"#关于命名规范\" class=\"headerlink\" title=\"关于命名规范\"></a>关于命名规范</h3><p>Helix2D的方法都使用<strong>小驼峰</strong>书写，<br>也就是第一个单词首字母小写，其余单词首字符大写</p>\n<p>类名则使用<strong>大驼峰</strong>书写，也就是所有单词首字母大写</p>\n<h3 id=\"关于属性\"><a href=\"#关于属性\" class=\"headerlink\" title=\"关于属性\"></a>关于属性</h3><p>一般情况下，用户可以使用 <strong>set + 属性名</strong> 的方式修改属性值，<br>获取属性则使用 <strong>get + 属性名</strong> 的方式获取属性值，<br>如果是获取<code>bool</code>类型的属性值，则使用 <strong>is + 属性值</strong> 的方式获取</p>\n<h3 id=\"如何学习\"><a href=\"#如何学习\" class=\"headerlink\" title=\"如何学习\"></a>如何学习</h3><p>虽然Helix2D的使用和学习比较简单，但全篇学习下来也需要一段时间，<br>我们更推荐选择性地学习，在学习完基本知识后，可以边写一个小程序边学习，遇到不懂的再查阅教程和文档</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇文章是为了阐述Helix2D的一些学习技巧和编码规范，以便用户可以更好的学习Helix2D的使用</p>\n<h3 id=\"关于教程和文档\"><a href=\"#关于教程和文档\" class=\"headerlink\" title=\"关于教程和文档\"></a>关于教程和文档</h3><p>教程中讲到的具体都是如何使用，比较简单；<br>文档中讲到的会比教程更详细，包括一些实现细节，更多的注意事项等等</p>\n<p>对于新手，你注要学习教程，文档只需选择性查阅即可<br>对于进阶，你可以专注于查阅文档和查看源码</p>\n<h3 id=\"关于命名规范\"><a href=\"#关于命名规范\" class=\"headerlink\" title=\"关于命名规范\"></a>关于命名规范</h3><p>Helix2D的方法都使用<strong>小驼峰</strong>书写，<br>也就是第一个单词首字母小写，其余单词首字符大写</p>\n<p>类名则使用<strong>大驼峰</strong>书写，也就是所有单词首字母大写</p>\n<h3 id=\"关于属性\"><a href=\"#关于属性\" class=\"headerlink\" title=\"关于属性\"></a>关于属性</h3><p>一般情况下，用户可以使用 <strong>set + 属性名</strong> 的方式修改属性值，<br>获取属性则使用 <strong>get + 属性名</strong> 的方式获取属性值，<br>如果是获取<code>bool</code>类型的属性值，则使用 <strong>is + 属性值</strong> 的方式获取</p>\n<h3 id=\"如何学习\"><a href=\"#如何学习\" class=\"headerlink\" title=\"如何学习\"></a>如何学习</h3><p>虽然Helix2D的使用和学习比较简单，但全篇学习下来也需要一段时间，<br>我们更推荐选择性地学习，在学习完基本知识后，可以边写一个小程序边学习，遇到不懂的再查阅教程和文档</p>\n"},{"_content":"## Window类使用\n\n本节中我们将会学习Window类的具体使用，让你可以更好的创建窗口\n\n### 基础功能：\n\n#### Window类的构造函数\n\n我们通过Window类的构造函数来指定窗口的属性，如标题，大小等\n\n函数原型：\n```C++\nWindow(\n    std::wstring title = L\"Helix2D\",\n    unsigned int width = 600, \n    unsigned int height = 600,\n    Window* parent = nullptr, \n    unsigned int fps = 60\n);\n```\n\n#### 将Painter添加进窗口中\n\n在之前，我们已经了解过如何添加Painter\n\n函数原型：\n```C++\nvoid addPainter(Painter* pPainter);\t\n```\n\n> 注意：addPainter只提供**地址**添加方式，而不是**引用**添加方式\n\n#### 设置窗口背景颜色\n\n窗口背景的默认颜色为白色，你可以使用以下方式修改\n\n```C++\nvoid setBackgroundColor(const Color& c);\n```\n\n#### 设置窗口帧率(FPS)\n\n你可以通过以下方式设置窗口帧率\n\n```C++\nvoid setFPS(unsigned int fps);\n```\n\n#### 设置窗口全屏\n\n由于窗口风格(*Style*) 原因，直接将窗口大小设为屏幕分辨率无法直接做到全屏，所以Window类提供了一个简单的全屏方法：\n\n```C++\nvoid setFullScreen(bool fullScreen);\n```\n\n参数为`true`则全屏，反之恢复原有状态\n\n#### 获取窗口大小\n\n你可以通过使用下面两个方法分别获取窗口宽高：\n```C++\nunsigned int getWidth()const;\nunsigned int getHeight()const;\n```\n\n#### 获取窗口下所有Painter\n\n你可以通过下面这个方法获取窗口下所有Painter\n\n```C++\nstd::vector<Painter*> getAllPainter()const;\n```\n> 注意：这里获取的所有Painter不包括Painter的子Painter\n> 后期会继续讲解子Painter\n\n### 进阶功能：\n\n为了实现一些更高级的功能，Window类提供了一些能够让用户自定义窗口的方法\n\n在使用这些方法前，你最好有一些简单的**Windows程序开发**和**DirectX**的知识\n\n#### 获取窗口句柄\n\n你可以通过以下方式获取窗口的句柄\n\n```C++\nHWND getHWND()const;\n```\n\n#### 获取渲染器(Renderer)\n\n渲染器(*Renderer*)是包含了一组DirectX接口和创建等方法的集合\n它在自定义Painter渲染中比较常见，而其他时候比较少用\n\n你可以通过以下方式获取渲染器\n\n```C++\nRenderer* getRenderer()const;\n```\n\n> 注意： 在任何时候你都不应该随意更改Renderer中的内容，而是合理的使用它们，否则随时可能会使程序瘫痪！\n\n#### 清理Window类(不建议使用)\n\n下面这个方法可以将所有Window类清除\n\n```C++\nstatic void uninit();\n```\n\n> 注意：该方法由Helix2D程序内部在程序结束时自动调用，而不需要用户手动调用，如果在程序运行中直接调用，我们无法保证后果如何\n\n### 小结\n\n现在你已经学会了关于Window类的大体使用啦，该类定义在头文件`h2dBase.h`中，你可以自行查阅理解~","source":"Tutorial/Base/Window.md","raw":"## Window类使用\n\n本节中我们将会学习Window类的具体使用，让你可以更好的创建窗口\n\n### 基础功能：\n\n#### Window类的构造函数\n\n我们通过Window类的构造函数来指定窗口的属性，如标题，大小等\n\n函数原型：\n```C++\nWindow(\n    std::wstring title = L\"Helix2D\",\n    unsigned int width = 600, \n    unsigned int height = 600,\n    Window* parent = nullptr, \n    unsigned int fps = 60\n);\n```\n\n#### 将Painter添加进窗口中\n\n在之前，我们已经了解过如何添加Painter\n\n函数原型：\n```C++\nvoid addPainter(Painter* pPainter);\t\n```\n\n> 注意：addPainter只提供**地址**添加方式，而不是**引用**添加方式\n\n#### 设置窗口背景颜色\n\n窗口背景的默认颜色为白色，你可以使用以下方式修改\n\n```C++\nvoid setBackgroundColor(const Color& c);\n```\n\n#### 设置窗口帧率(FPS)\n\n你可以通过以下方式设置窗口帧率\n\n```C++\nvoid setFPS(unsigned int fps);\n```\n\n#### 设置窗口全屏\n\n由于窗口风格(*Style*) 原因，直接将窗口大小设为屏幕分辨率无法直接做到全屏，所以Window类提供了一个简单的全屏方法：\n\n```C++\nvoid setFullScreen(bool fullScreen);\n```\n\n参数为`true`则全屏，反之恢复原有状态\n\n#### 获取窗口大小\n\n你可以通过使用下面两个方法分别获取窗口宽高：\n```C++\nunsigned int getWidth()const;\nunsigned int getHeight()const;\n```\n\n#### 获取窗口下所有Painter\n\n你可以通过下面这个方法获取窗口下所有Painter\n\n```C++\nstd::vector<Painter*> getAllPainter()const;\n```\n> 注意：这里获取的所有Painter不包括Painter的子Painter\n> 后期会继续讲解子Painter\n\n### 进阶功能：\n\n为了实现一些更高级的功能，Window类提供了一些能够让用户自定义窗口的方法\n\n在使用这些方法前，你最好有一些简单的**Windows程序开发**和**DirectX**的知识\n\n#### 获取窗口句柄\n\n你可以通过以下方式获取窗口的句柄\n\n```C++\nHWND getHWND()const;\n```\n\n#### 获取渲染器(Renderer)\n\n渲染器(*Renderer*)是包含了一组DirectX接口和创建等方法的集合\n它在自定义Painter渲染中比较常见，而其他时候比较少用\n\n你可以通过以下方式获取渲染器\n\n```C++\nRenderer* getRenderer()const;\n```\n\n> 注意： 在任何时候你都不应该随意更改Renderer中的内容，而是合理的使用它们，否则随时可能会使程序瘫痪！\n\n#### 清理Window类(不建议使用)\n\n下面这个方法可以将所有Window类清除\n\n```C++\nstatic void uninit();\n```\n\n> 注意：该方法由Helix2D程序内部在程序结束时自动调用，而不需要用户手动调用，如果在程序运行中直接调用，我们无法保证后果如何\n\n### 小结\n\n现在你已经学会了关于Window类的大体使用啦，该类定义在头文件`h2dBase.h`中，你可以自行查阅理解~","date":"2023-07-15T06:36:59.132Z","updated":"2023-07-15T01:16:55.589Z","path":"Tutorial/Base/Window.html","title":"","comments":1,"layout":"page","_id":"clk9nmqvj0001kssyfvxnac56","content":"<h2 id=\"Window类使用\"><a href=\"#Window类使用\" class=\"headerlink\" title=\"Window类使用\"></a>Window类使用</h2><p>本节中我们将会学习Window类的具体使用，让你可以更好的创建窗口</p>\n<h3 id=\"基础功能：\"><a href=\"#基础功能：\" class=\"headerlink\" title=\"基础功能：\"></a>基础功能：</h3><h4 id=\"Window类的构造函数\"><a href=\"#Window类的构造函数\" class=\"headerlink\" title=\"Window类的构造函数\"></a>Window类的构造函数</h4><p>我们通过Window类的构造函数来指定窗口的属性，如标题，大小等</p>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Window</span>(</span><br><span class=\"line\">    std::wstring title = <span class=\"string\">L&quot;Helix2D&quot;</span>,</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> width = <span class=\"number\">600</span>, </span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> height = <span class=\"number\">600</span>,</span><br><span class=\"line\">    Window* parent = <span class=\"literal\">nullptr</span>, </span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> fps = <span class=\"number\">60</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将Painter添加进窗口中\"><a href=\"#将Painter添加进窗口中\" class=\"headerlink\" title=\"将Painter添加进窗口中\"></a>将Painter添加进窗口中</h4><p>在之前，我们已经了解过如何添加Painter</p>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addPainter</span><span class=\"params\">(Painter* pPainter)</span></span>;\t</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：addPainter只提供<strong>地址</strong>添加方式，而不是<strong>引用</strong>添加方式</p>\n</blockquote>\n<h4 id=\"设置窗口背景颜色\"><a href=\"#设置窗口背景颜色\" class=\"headerlink\" title=\"设置窗口背景颜色\"></a>设置窗口背景颜色</h4><p>窗口背景的默认颜色为白色，你可以使用以下方式修改</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setBackgroundColor</span><span class=\"params\">(<span class=\"type\">const</span> Color&amp; c)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置窗口帧率-FPS\"><a href=\"#设置窗口帧率-FPS\" class=\"headerlink\" title=\"设置窗口帧率(FPS)\"></a>设置窗口帧率(FPS)</h4><p>你可以通过以下方式设置窗口帧率</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setFPS</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> fps)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置窗口全屏\"><a href=\"#设置窗口全屏\" class=\"headerlink\" title=\"设置窗口全屏\"></a>设置窗口全屏</h4><p>由于窗口风格(<em>Style</em>) 原因，直接将窗口大小设为屏幕分辨率无法直接做到全屏，所以Window类提供了一个简单的全屏方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setFullScreen</span><span class=\"params\">(<span class=\"type\">bool</span> fullScreen)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>参数为<code>true</code>则全屏，反之恢复原有状态</p>\n<h4 id=\"获取窗口大小\"><a href=\"#获取窗口大小\" class=\"headerlink\" title=\"获取窗口大小\"></a>获取窗口大小</h4><p>你可以通过使用下面两个方法分别获取窗口宽高：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title\">getWidth</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取窗口下所有Painter\"><a href=\"#获取窗口下所有Painter\" class=\"headerlink\" title=\"获取窗口下所有Painter\"></a>获取窗口下所有Painter</h4><p>你可以通过下面这个方法获取窗口下所有Painter</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;Painter*&gt; <span class=\"title\">getAllPainter</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：这里获取的所有Painter不包括Painter的子Painter<br>后期会继续讲解子Painter</p>\n</blockquote>\n<h3 id=\"进阶功能：\"><a href=\"#进阶功能：\" class=\"headerlink\" title=\"进阶功能：\"></a>进阶功能：</h3><p>为了实现一些更高级的功能，Window类提供了一些能够让用户自定义窗口的方法</p>\n<p>在使用这些方法前，你最好有一些简单的<strong>Windows程序开发</strong>和<strong>DirectX</strong>的知识</p>\n<h4 id=\"获取窗口句柄\"><a href=\"#获取窗口句柄\" class=\"headerlink\" title=\"获取窗口句柄\"></a>获取窗口句柄</h4><p>你可以通过以下方式获取窗口的句柄</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">HWND <span class=\"title\">getHWND</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取渲染器-Renderer\"><a href=\"#获取渲染器-Renderer\" class=\"headerlink\" title=\"获取渲染器(Renderer)\"></a>获取渲染器(Renderer)</h4><p>渲染器(<em>Renderer</em>)是包含了一组DirectX接口和创建等方法的集合<br>它在自定义Painter渲染中比较常见，而其他时候比较少用</p>\n<p>你可以通过以下方式获取渲染器</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Renderer* <span class=\"title\">getRenderer</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意： 在任何时候你都不应该随意更改Renderer中的内容，而是合理的使用它们，否则随时可能会使程序瘫痪！</p>\n</blockquote>\n<h4 id=\"清理Window类-不建议使用\"><a href=\"#清理Window类-不建议使用\" class=\"headerlink\" title=\"清理Window类(不建议使用)\"></a>清理Window类(不建议使用)</h4><p>下面这个方法可以将所有Window类清除</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">uninit</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：该方法由Helix2D程序内部在程序结束时自动调用，而不需要用户手动调用，如果在程序运行中直接调用，我们无法保证后果如何</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>现在你已经学会了关于Window类的大体使用啦，该类定义在头文件<code>h2dBase.h</code>中，你可以自行查阅理解~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Window类使用\"><a href=\"#Window类使用\" class=\"headerlink\" title=\"Window类使用\"></a>Window类使用</h2><p>本节中我们将会学习Window类的具体使用，让你可以更好的创建窗口</p>\n<h3 id=\"基础功能：\"><a href=\"#基础功能：\" class=\"headerlink\" title=\"基础功能：\"></a>基础功能：</h3><h4 id=\"Window类的构造函数\"><a href=\"#Window类的构造函数\" class=\"headerlink\" title=\"Window类的构造函数\"></a>Window类的构造函数</h4><p>我们通过Window类的构造函数来指定窗口的属性，如标题，大小等</p>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Window</span>(</span><br><span class=\"line\">    std::wstring title = <span class=\"string\">L&quot;Helix2D&quot;</span>,</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> width = <span class=\"number\">600</span>, </span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> height = <span class=\"number\">600</span>,</span><br><span class=\"line\">    Window* parent = <span class=\"literal\">nullptr</span>, </span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> fps = <span class=\"number\">60</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将Painter添加进窗口中\"><a href=\"#将Painter添加进窗口中\" class=\"headerlink\" title=\"将Painter添加进窗口中\"></a>将Painter添加进窗口中</h4><p>在之前，我们已经了解过如何添加Painter</p>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addPainter</span><span class=\"params\">(Painter* pPainter)</span></span>;\t</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：addPainter只提供<strong>地址</strong>添加方式，而不是<strong>引用</strong>添加方式</p>\n</blockquote>\n<h4 id=\"设置窗口背景颜色\"><a href=\"#设置窗口背景颜色\" class=\"headerlink\" title=\"设置窗口背景颜色\"></a>设置窗口背景颜色</h4><p>窗口背景的默认颜色为白色，你可以使用以下方式修改</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setBackgroundColor</span><span class=\"params\">(<span class=\"type\">const</span> Color&amp; c)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置窗口帧率-FPS\"><a href=\"#设置窗口帧率-FPS\" class=\"headerlink\" title=\"设置窗口帧率(FPS)\"></a>设置窗口帧率(FPS)</h4><p>你可以通过以下方式设置窗口帧率</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setFPS</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> fps)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置窗口全屏\"><a href=\"#设置窗口全屏\" class=\"headerlink\" title=\"设置窗口全屏\"></a>设置窗口全屏</h4><p>由于窗口风格(<em>Style</em>) 原因，直接将窗口大小设为屏幕分辨率无法直接做到全屏，所以Window类提供了一个简单的全屏方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setFullScreen</span><span class=\"params\">(<span class=\"type\">bool</span> fullScreen)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>参数为<code>true</code>则全屏，反之恢复原有状态</p>\n<h4 id=\"获取窗口大小\"><a href=\"#获取窗口大小\" class=\"headerlink\" title=\"获取窗口大小\"></a>获取窗口大小</h4><p>你可以通过使用下面两个方法分别获取窗口宽高：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title\">getWidth</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取窗口下所有Painter\"><a href=\"#获取窗口下所有Painter\" class=\"headerlink\" title=\"获取窗口下所有Painter\"></a>获取窗口下所有Painter</h4><p>你可以通过下面这个方法获取窗口下所有Painter</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;Painter*&gt; <span class=\"title\">getAllPainter</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：这里获取的所有Painter不包括Painter的子Painter<br>后期会继续讲解子Painter</p>\n</blockquote>\n<h3 id=\"进阶功能：\"><a href=\"#进阶功能：\" class=\"headerlink\" title=\"进阶功能：\"></a>进阶功能：</h3><p>为了实现一些更高级的功能，Window类提供了一些能够让用户自定义窗口的方法</p>\n<p>在使用这些方法前，你最好有一些简单的<strong>Windows程序开发</strong>和<strong>DirectX</strong>的知识</p>\n<h4 id=\"获取窗口句柄\"><a href=\"#获取窗口句柄\" class=\"headerlink\" title=\"获取窗口句柄\"></a>获取窗口句柄</h4><p>你可以通过以下方式获取窗口的句柄</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">HWND <span class=\"title\">getHWND</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取渲染器-Renderer\"><a href=\"#获取渲染器-Renderer\" class=\"headerlink\" title=\"获取渲染器(Renderer)\"></a>获取渲染器(Renderer)</h4><p>渲染器(<em>Renderer</em>)是包含了一组DirectX接口和创建等方法的集合<br>它在自定义Painter渲染中比较常见，而其他时候比较少用</p>\n<p>你可以通过以下方式获取渲染器</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Renderer* <span class=\"title\">getRenderer</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意： 在任何时候你都不应该随意更改Renderer中的内容，而是合理的使用它们，否则随时可能会使程序瘫痪！</p>\n</blockquote>\n<h4 id=\"清理Window类-不建议使用\"><a href=\"#清理Window类-不建议使用\" class=\"headerlink\" title=\"清理Window类(不建议使用)\"></a>清理Window类(不建议使用)</h4><p>下面这个方法可以将所有Window类清除</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">uninit</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：该方法由Helix2D程序内部在程序结束时自动调用，而不需要用户手动调用，如果在程序运行中直接调用，我们无法保证后果如何</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>现在你已经学会了关于Window类的大体使用啦，该类定义在头文件<code>h2dBase.h</code>中，你可以自行查阅理解~</p>\n"},{"_content":"## Painter类使用\n\nPainter是组成整个Helix2D程序的拼图，因此它的使用比较多样，\n限于篇幅原因，这里只介绍简单的功能使用\n\n> 注意：Painter只是一个基类，涵盖了基本的通用方法，本身不起作用\n\n### 子Painter\n\nPainter允许添加子Painter，你可以理解为*一个画家带着多个画家*\n子Painter的部分属性会受父Painter影响，主要有以下几种\n- Position 坐标\n- Rotation 旋转\n- Scale 缩放\n\n你可以使用以下方法添加子Painter：\n```C++\nvoid addPainter(Painter* pPainter);\n```\n\n> 注意：添加Painter有一些要求\n> - 父Painter不能是子Painter的子Painter\n> - 一个子Painter只能有一个父Painter\n> - 父Painter不能有多个重复的子Painter(nullptr则不添加)\n>\n> 这些保证Painter的关系成一个树状图，便于理解和使用\n\n你可以使用以下方法获取所有已添加的Painter(不包括子Painter的子Painter)：\n```C++\nstd::vector<Painter*> getAllPainter()const;\n```\n\n你可以使用以下方法获取父Painter：\n```C++\nPainter* getParent()const;\n//如果没有父Painter，则返回空指针nullptr\n```\n\n### Position属性\n\nPosition坐标决定了Painter在Window中的哪里绘画\n\n你可以使用以下这些方法来操作相对坐标：\n```C++\n//设置坐标\nvoid setPos(float x, float y);\nvoid setPos(Vector2 pos);\n\nvoid setPosX(float x);\nvoid setPosY(float y);\n\n//移动坐标\nvoid movePos(float x, float y);\nvoid movePos(Vector2 pos);\n\nvoid movePosX(float x);\nvoid movePosY(float y);\n\n//获取同理\n```\n\n### Anchor锚点\n\n所谓锚点，也就是中心点，许多属性控制的都是锚点\n\n当锚点为 **(0.0,0.0)** 时，中心点位于**左上角**\n当锚点为 **(0.5,0.5)** 时，中心点位于**正中心**\n当锚点为 **(1.0,1.0)** 时，中心点位于**右下角**\n\n锚点也可以在外部，但是不常用\n\n一般情况下，Anchor的默认值为(0.5,0.5)，若要修改，可以用下列方法：\n\n```C++\nstatic void setDefaultAnchorPos(Vector2 pos);\nstatic void setDefaultAnchorPos(float x, float y);\n```\n\n> 注意：新的默认值对已经创建的Painter不起效果\n\n### Rotation旋转\n\nPainter的旋转是围绕Anchor旋转特定角度\n\n你可以操控Painter的旋转角度对其进行旋转\n对于旋转，有以下几种方法\n\n```C++\n//旋转特定角度\nvoid rotate(float angle);\n\n//设置旋转的角度\nvoid setAngle(float angle);\n```\n\n同时，当父Painter旋转时，子Painter也会绕着父Painter的Anchor旋转\n\n### Scale 缩放\n\n缩放可以控制Painter的显示大小，你可以对它进行设置\n\n同时，你应当将父Painter和子Painter看作成一个整体，父Painter缩放时，子Painter也会缩放，并且在父Painter中的位置不变\n\n### Flip 翻转\n\n翻转其实就是缩放的特殊形式，但Helix2D将它进行了一个简单的封装，使其使用更加方便~\n\n你可以直接设置是否翻转，也可以使用翻转方法：\n\n```C++\nvoid flipX();\nvoid flipY();\n```\n\n## 小结\n\n本节我们学习了有关Painter的一些简单属性，它们对于显示图像基本是已经完全够用了，但对于交互和动画，只使用它们还不够\n下节我们会学习一些基本的Painter，来绘画不同的图像~","source":"Tutorial/Render/Painter.md","raw":"## Painter类使用\n\nPainter是组成整个Helix2D程序的拼图，因此它的使用比较多样，\n限于篇幅原因，这里只介绍简单的功能使用\n\n> 注意：Painter只是一个基类，涵盖了基本的通用方法，本身不起作用\n\n### 子Painter\n\nPainter允许添加子Painter，你可以理解为*一个画家带着多个画家*\n子Painter的部分属性会受父Painter影响，主要有以下几种\n- Position 坐标\n- Rotation 旋转\n- Scale 缩放\n\n你可以使用以下方法添加子Painter：\n```C++\nvoid addPainter(Painter* pPainter);\n```\n\n> 注意：添加Painter有一些要求\n> - 父Painter不能是子Painter的子Painter\n> - 一个子Painter只能有一个父Painter\n> - 父Painter不能有多个重复的子Painter(nullptr则不添加)\n>\n> 这些保证Painter的关系成一个树状图，便于理解和使用\n\n你可以使用以下方法获取所有已添加的Painter(不包括子Painter的子Painter)：\n```C++\nstd::vector<Painter*> getAllPainter()const;\n```\n\n你可以使用以下方法获取父Painter：\n```C++\nPainter* getParent()const;\n//如果没有父Painter，则返回空指针nullptr\n```\n\n### Position属性\n\nPosition坐标决定了Painter在Window中的哪里绘画\n\n你可以使用以下这些方法来操作相对坐标：\n```C++\n//设置坐标\nvoid setPos(float x, float y);\nvoid setPos(Vector2 pos);\n\nvoid setPosX(float x);\nvoid setPosY(float y);\n\n//移动坐标\nvoid movePos(float x, float y);\nvoid movePos(Vector2 pos);\n\nvoid movePosX(float x);\nvoid movePosY(float y);\n\n//获取同理\n```\n\n### Anchor锚点\n\n所谓锚点，也就是中心点，许多属性控制的都是锚点\n\n当锚点为 **(0.0,0.0)** 时，中心点位于**左上角**\n当锚点为 **(0.5,0.5)** 时，中心点位于**正中心**\n当锚点为 **(1.0,1.0)** 时，中心点位于**右下角**\n\n锚点也可以在外部，但是不常用\n\n一般情况下，Anchor的默认值为(0.5,0.5)，若要修改，可以用下列方法：\n\n```C++\nstatic void setDefaultAnchorPos(Vector2 pos);\nstatic void setDefaultAnchorPos(float x, float y);\n```\n\n> 注意：新的默认值对已经创建的Painter不起效果\n\n### Rotation旋转\n\nPainter的旋转是围绕Anchor旋转特定角度\n\n你可以操控Painter的旋转角度对其进行旋转\n对于旋转，有以下几种方法\n\n```C++\n//旋转特定角度\nvoid rotate(float angle);\n\n//设置旋转的角度\nvoid setAngle(float angle);\n```\n\n同时，当父Painter旋转时，子Painter也会绕着父Painter的Anchor旋转\n\n### Scale 缩放\n\n缩放可以控制Painter的显示大小，你可以对它进行设置\n\n同时，你应当将父Painter和子Painter看作成一个整体，父Painter缩放时，子Painter也会缩放，并且在父Painter中的位置不变\n\n### Flip 翻转\n\n翻转其实就是缩放的特殊形式，但Helix2D将它进行了一个简单的封装，使其使用更加方便~\n\n你可以直接设置是否翻转，也可以使用翻转方法：\n\n```C++\nvoid flipX();\nvoid flipY();\n```\n\n## 小结\n\n本节我们学习了有关Painter的一些简单属性，它们对于显示图像基本是已经完全够用了，但对于交互和动画，只使用它们还不够\n下节我们会学习一些基本的Painter，来绘画不同的图像~","date":"2023-07-16T02:04:58.767Z","updated":"2023-07-16T02:04:58.767Z","path":"Tutorial/Render/Painter.html","title":"","comments":1,"layout":"page","_id":"clk9nmqvk0002kssy6tczdq36","content":"<h2 id=\"Painter类使用\"><a href=\"#Painter类使用\" class=\"headerlink\" title=\"Painter类使用\"></a>Painter类使用</h2><p>Painter是组成整个Helix2D程序的拼图，因此它的使用比较多样，<br>限于篇幅原因，这里只介绍简单的功能使用</p>\n<blockquote>\n<p>注意：Painter只是一个基类，涵盖了基本的通用方法，本身不起作用</p>\n</blockquote>\n<h3 id=\"子Painter\"><a href=\"#子Painter\" class=\"headerlink\" title=\"子Painter\"></a>子Painter</h3><p>Painter允许添加子Painter，你可以理解为<em>一个画家带着多个画家</em><br>子Painter的部分属性会受父Painter影响，主要有以下几种</p>\n<ul>\n<li>Position 坐标</li>\n<li>Rotation 旋转</li>\n<li>Scale 缩放</li>\n</ul>\n<p>你可以使用以下方法添加子Painter：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addPainter</span><span class=\"params\">(Painter* pPainter)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：添加Painter有一些要求</p>\n<ul>\n<li>父Painter不能是子Painter的子Painter</li>\n<li>一个子Painter只能有一个父Painter</li>\n<li>父Painter不能有多个重复的子Painter(nullptr则不添加)</li>\n</ul>\n<p>这些保证Painter的关系成一个树状图，便于理解和使用</p>\n</blockquote>\n<p>你可以使用以下方法获取所有已添加的Painter(不包括子Painter的子Painter)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;Painter*&gt; <span class=\"title\">getAllPainter</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用以下方法获取父Painter：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Painter* <span class=\"title\">getParent</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//如果没有父Painter，则返回空指针nullptr</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Position属性\"><a href=\"#Position属性\" class=\"headerlink\" title=\"Position属性\"></a>Position属性</h3><p>Position坐标决定了Painter在Window中的哪里绘画</p>\n<p>你可以使用以下这些方法来操作相对坐标：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置坐标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPos</span><span class=\"params\">(<span class=\"type\">float</span> x, <span class=\"type\">float</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPos</span><span class=\"params\">(Vector2 pos)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPosX</span><span class=\"params\">(<span class=\"type\">float</span> x)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPosY</span><span class=\"params\">(<span class=\"type\">float</span> y)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移动坐标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movePos</span><span class=\"params\">(<span class=\"type\">float</span> x, <span class=\"type\">float</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movePos</span><span class=\"params\">(Vector2 pos)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movePosX</span><span class=\"params\">(<span class=\"type\">float</span> x)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movePosY</span><span class=\"params\">(<span class=\"type\">float</span> y)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取同理</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Anchor锚点\"><a href=\"#Anchor锚点\" class=\"headerlink\" title=\"Anchor锚点\"></a>Anchor锚点</h3><p>所谓锚点，也就是中心点，许多属性控制的都是锚点</p>\n<p>当锚点为 <strong>(0.0,0.0)</strong> 时，中心点位于<strong>左上角</strong><br>当锚点为 <strong>(0.5,0.5)</strong> 时，中心点位于<strong>正中心</strong><br>当锚点为 <strong>(1.0,1.0)</strong> 时，中心点位于<strong>右下角</strong></p>\n<p>锚点也可以在外部，但是不常用</p>\n<p>一般情况下，Anchor的默认值为(0.5,0.5)，若要修改，可以用下列方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">setDefaultAnchorPos</span><span class=\"params\">(Vector2 pos)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">setDefaultAnchorPos</span><span class=\"params\">(<span class=\"type\">float</span> x, <span class=\"type\">float</span> y)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：新的默认值对已经创建的Painter不起效果</p>\n</blockquote>\n<h3 id=\"Rotation旋转\"><a href=\"#Rotation旋转\" class=\"headerlink\" title=\"Rotation旋转\"></a>Rotation旋转</h3><p>Painter的旋转是围绕Anchor旋转特定角度</p>\n<p>你可以操控Painter的旋转角度对其进行旋转<br>对于旋转，有以下几种方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//旋转特定角度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">float</span> angle)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置旋转的角度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setAngle</span><span class=\"params\">(<span class=\"type\">float</span> angle)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>同时，当父Painter旋转时，子Painter也会绕着父Painter的Anchor旋转</p>\n<h3 id=\"Scale-缩放\"><a href=\"#Scale-缩放\" class=\"headerlink\" title=\"Scale 缩放\"></a>Scale 缩放</h3><p>缩放可以控制Painter的显示大小，你可以对它进行设置</p>\n<p>同时，你应当将父Painter和子Painter看作成一个整体，父Painter缩放时，子Painter也会缩放，并且在父Painter中的位置不变</p>\n<h3 id=\"Flip-翻转\"><a href=\"#Flip-翻转\" class=\"headerlink\" title=\"Flip 翻转\"></a>Flip 翻转</h3><p>翻转其实就是缩放的特殊形式，但Helix2D将它进行了一个简单的封装，使其使用更加方便~</p>\n<p>你可以直接设置是否翻转，也可以使用翻转方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">flipX</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">flipY</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本节我们学习了有关Painter的一些简单属性，它们对于显示图像基本是已经完全够用了，但对于交互和动画，只使用它们还不够<br>下节我们会学习一些基本的Painter，来绘画不同的图像~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Painter类使用\"><a href=\"#Painter类使用\" class=\"headerlink\" title=\"Painter类使用\"></a>Painter类使用</h2><p>Painter是组成整个Helix2D程序的拼图，因此它的使用比较多样，<br>限于篇幅原因，这里只介绍简单的功能使用</p>\n<blockquote>\n<p>注意：Painter只是一个基类，涵盖了基本的通用方法，本身不起作用</p>\n</blockquote>\n<h3 id=\"子Painter\"><a href=\"#子Painter\" class=\"headerlink\" title=\"子Painter\"></a>子Painter</h3><p>Painter允许添加子Painter，你可以理解为<em>一个画家带着多个画家</em><br>子Painter的部分属性会受父Painter影响，主要有以下几种</p>\n<ul>\n<li>Position 坐标</li>\n<li>Rotation 旋转</li>\n<li>Scale 缩放</li>\n</ul>\n<p>你可以使用以下方法添加子Painter：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addPainter</span><span class=\"params\">(Painter* pPainter)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：添加Painter有一些要求</p>\n<ul>\n<li>父Painter不能是子Painter的子Painter</li>\n<li>一个子Painter只能有一个父Painter</li>\n<li>父Painter不能有多个重复的子Painter(nullptr则不添加)</li>\n</ul>\n<p>这些保证Painter的关系成一个树状图，便于理解和使用</p>\n</blockquote>\n<p>你可以使用以下方法获取所有已添加的Painter(不包括子Painter的子Painter)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;Painter*&gt; <span class=\"title\">getAllPainter</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用以下方法获取父Painter：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Painter* <span class=\"title\">getParent</span><span class=\"params\">()</span><span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//如果没有父Painter，则返回空指针nullptr</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Position属性\"><a href=\"#Position属性\" class=\"headerlink\" title=\"Position属性\"></a>Position属性</h3><p>Position坐标决定了Painter在Window中的哪里绘画</p>\n<p>你可以使用以下这些方法来操作相对坐标：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置坐标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPos</span><span class=\"params\">(<span class=\"type\">float</span> x, <span class=\"type\">float</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPos</span><span class=\"params\">(Vector2 pos)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPosX</span><span class=\"params\">(<span class=\"type\">float</span> x)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setPosY</span><span class=\"params\">(<span class=\"type\">float</span> y)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移动坐标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movePos</span><span class=\"params\">(<span class=\"type\">float</span> x, <span class=\"type\">float</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movePos</span><span class=\"params\">(Vector2 pos)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movePosX</span><span class=\"params\">(<span class=\"type\">float</span> x)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movePosY</span><span class=\"params\">(<span class=\"type\">float</span> y)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取同理</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Anchor锚点\"><a href=\"#Anchor锚点\" class=\"headerlink\" title=\"Anchor锚点\"></a>Anchor锚点</h3><p>所谓锚点，也就是中心点，许多属性控制的都是锚点</p>\n<p>当锚点为 <strong>(0.0,0.0)</strong> 时，中心点位于<strong>左上角</strong><br>当锚点为 <strong>(0.5,0.5)</strong> 时，中心点位于<strong>正中心</strong><br>当锚点为 <strong>(1.0,1.0)</strong> 时，中心点位于<strong>右下角</strong></p>\n<p>锚点也可以在外部，但是不常用</p>\n<p>一般情况下，Anchor的默认值为(0.5,0.5)，若要修改，可以用下列方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">setDefaultAnchorPos</span><span class=\"params\">(Vector2 pos)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">setDefaultAnchorPos</span><span class=\"params\">(<span class=\"type\">float</span> x, <span class=\"type\">float</span> y)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：新的默认值对已经创建的Painter不起效果</p>\n</blockquote>\n<h3 id=\"Rotation旋转\"><a href=\"#Rotation旋转\" class=\"headerlink\" title=\"Rotation旋转\"></a>Rotation旋转</h3><p>Painter的旋转是围绕Anchor旋转特定角度</p>\n<p>你可以操控Painter的旋转角度对其进行旋转<br>对于旋转，有以下几种方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//旋转特定角度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">float</span> angle)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置旋转的角度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setAngle</span><span class=\"params\">(<span class=\"type\">float</span> angle)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>同时，当父Painter旋转时，子Painter也会绕着父Painter的Anchor旋转</p>\n<h3 id=\"Scale-缩放\"><a href=\"#Scale-缩放\" class=\"headerlink\" title=\"Scale 缩放\"></a>Scale 缩放</h3><p>缩放可以控制Painter的显示大小，你可以对它进行设置</p>\n<p>同时，你应当将父Painter和子Painter看作成一个整体，父Painter缩放时，子Painter也会缩放，并且在父Painter中的位置不变</p>\n<h3 id=\"Flip-翻转\"><a href=\"#Flip-翻转\" class=\"headerlink\" title=\"Flip 翻转\"></a>Flip 翻转</h3><p>翻转其实就是缩放的特殊形式，但Helix2D将它进行了一个简单的封装，使其使用更加方便~</p>\n<p>你可以直接设置是否翻转，也可以使用翻转方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">flipX</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">flipY</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本节我们学习了有关Painter的一些简单属性，它们对于显示图像基本是已经完全够用了，但对于交互和动画，只使用它们还不够<br>下节我们会学习一些基本的Painter，来绘画不同的图像~</p>\n"}],"Post":[{"title":"Home","date":"2023-06-18T03:27:06.000Z","_content":"\n## Welcome To Helix2D!\n\n","source":"_posts/index.md","raw":"---\ntitle: Home\ndate: 2023-06-18 11:27:06\ntags:\n---\n\n## Welcome To Helix2D!\n\n","slug":"index","published":1,"updated":"2023-06-18T09:17:41.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljy5aqpc0002z0syhrar2uw7","content":"<h2 id=\"Welcome-To-Helix2D\"><a href=\"#Welcome-To-Helix2D\" class=\"headerlink\" title=\"Welcome To Helix2D!\"></a>Welcome To Helix2D!</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Welcome-To-Helix2D\"><a href=\"#Welcome-To-Helix2D\" class=\"headerlink\" title=\"Welcome To Helix2D!\"></a>Welcome To Helix2D!</h2>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}